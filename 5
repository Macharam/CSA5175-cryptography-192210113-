#include <stdio.h>
#include <string.h>
#include <ctype.h>
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}
void encrypt(char plaintext[], char ciphertext[], int a, int b) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        char ch = plaintext[i];
        if (isalpha(ch)) {
            int p = toupper(ch) - 'A'; 
            ciphertext[i] = ((a * p + b) % 26) + 'A'; 
        } else {
            ciphertext[i] = ch;
        }
    }
    ciphertext[strlen(plaintext)] = '\0'; 
}
void decrypt(char ciphertext[], char decrypted[], int a, int b) {
    int a_inv = modInverse(a, 26); 
    if (a_inv == -1) {
        printf("Decryption is not possible; 'a' has no modular inverse under modulo 26.\n");
        return;
    }
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        char ch = ciphertext[i];
        if (isalpha(ch)) {
            int C = toupper(ch) - 'A';
            decrypted[i] = ((a_inv * (C - b + 26)) % 26) + 'A'; 
        } else {
            decrypted[i] = ch;
        }
    }
    decrypted[strlen(ciphertext)] = '\0'; 
}

int main() {
    char plaintext[100], ciphertext[100], decrypted[100];
    int a, b;
    printf("Enter the plaintext: ");
    scanf("%s", plaintext);
    printf("Enter the values of a and b: ");
    scanf("%d %d", &a, &b);
    if (gcd(a, 26) != 1) {
        printf("Invalid value of 'a'. 'a' must be coprime with 26.\n");
        return 1;
    }
    encrypt(plaintext, ciphertext, a, b);
    printf("Ciphertext: %s\n", ciphertext);
    decrypt(ciphertext, decrypted, a, b);
    printf("Decrypted text: %s\n", decrypted);
    return 0;
}
