#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// English letter frequencies in percentage
const double english_frequencies[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 
    0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 
    6.327, 9.056, 2.758, 0.978, 2.360, 0.150, 1.974, 0.074
};

// Function prototypes
void calculate_frequencies(const char *text, double *frequencies);
void sort_frequencies(const double *frequencies, int *indices);
void decrypt(const char *ciphertext, const int *mapping, char *plaintext);
void generate_plaintexts(const char *ciphertext, int top_n);

int main() {
    char ciphertext[1000];
    int top_n;

    // Input ciphertext
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove trailing newline

    // Input number of top plaintexts to display
    printf("Enter the number of top plaintexts to display: ");
    scanf("%d", &top_n);

    // Generate and display possible plaintexts
    generate_plaintexts(ciphertext, top_n);

    return 0;
}

// Calculate letter frequencies in the text
void calculate_frequencies(const char *text, double *frequencies) {
    int count[ALPHABET_SIZE] = {0};
    int total_letters = 0;

    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            count[tolower(text[i]) - 'a']++;
            total_letters++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequencies[i] = (count[i] / (double)total_letters) * 100;
    }
}

// Sort frequencies and return indices in descending order
void sort_frequencies(const double *frequencies, int *indices) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        indices[i] = i;
    }

    for (int i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (int j = i + 1; j < ALPHABET_SIZE; j++) {
            if (frequencies[indices[i]] < frequencies[indices[j]]) {
                int temp = indices[i];
                indices[i] = indices[j];
                indices[j] = temp;
            }
        }
    }
}

// Decrypt the ciphertext using the given mapping
void decrypt(const char *ciphertext, const int *mapping, char *plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            int is_upper = isupper(ciphertext[i]);
            char letter = tolower(ciphertext[i]) - 'a';
            plaintext[i] = mapping[letter] + (is_upper ? 'A' : 'a');
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Generate and display top plaintexts
void generate_plaintexts(const char *ciphertext, int top_n) {
    double cipher_frequencies[ALPHABET_SIZE] = {0};
    int cipher_indices[ALPHABET_SIZE];
    int english_indices[ALPHABET_SIZE];
    char plaintext[1000];

    // Calculate and sort ciphertext frequencies
    calculate_frequencies(ciphertext, cipher_frequencies);
    sort_frequencies(cipher_frequencies, cipher_indices);

    // Sort English frequencies
    sort_frequencies(english_frequencies, english_indices);

    // Generate possible mappings and plaintexts
    for (int n = 1; n <= top_n; n++) {
        int mapping[ALPHABET_SIZE];

        // Map top `n` letters in ciphertext to top `n` English letters
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            mapping[cipher_indices[i]] = english_indices[(i + n - 1) % ALPHABET_SIZE];
        }

        // Decrypt and display plaintext
        decrypt(ciphertext, mapping, plaintext);
        printf("Possible plaintext #%d: %s\n", n, plaintext);
    }
}
